// Especificação do parser CUP
package parser;
import java_cup.runtime.*;
import java.util.HashMap;
import java.lang.Math;

parser code{:
        private HashMap<String, Double> symbolTable = new HashMap<>();
:}

// Definição dos terminais
terminal            SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal            UMINUS, LPAREN, RPAREN, ASSIGN, SIN, COS, EXPO;
terminal Double     NUMBER;
terminal Double     PI;
terminal String     ID;
// Definição dos não-terminais
non terminal            expr_list, expr_part;
non terminal Double     expr;
// Precedência e associatividade dos operadores
precedence right ASSIGN;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left EXPO;
precedence left UMINUS;

// Regras da gramática
expr_list ::= expr_list expr_part
    | expr_part
    ;
expr_part ::= expr:e {:
        System.out.println("Resultado: " + e); :} SEMI
    | error SEMI
    ;
expr ::= expr:e1 PLUS expr:e2
            {: RESULT = e1 + e2; :}
    | expr:e1 MINUS expr:e2
            {: RESULT = e1 - e2; :}
    | expr:e1 TIMES expr:e2
            {: RESULT = e1 * e2; :}
    | expr:e1 DIVIDE expr:e2
            {: RESULT = e1 / e2; :}
    | expr:e1 MOD expr:e2
            {: RESULT = e1 % e2; :}
    | expr:e1 EXPO expr:e2
            {: RESULT = Math.pow(e1, e2); :}
    | NUMBER:n {: RESULT = n; :}
    | PI:n     {: RESULT = n; :}
    | MINUS expr:e {: RESULT = -e;
                    :} %prec UMINUS
    | LPAREN expr:e RPAREN {: RESULT = e; :}
    | SIN LPAREN expr:e RPAREN {: RESULT = Math.sin(e); :}
    | COS LPAREN expr:e RPAREN {: RESULT = Math.cos(e); :}
    | ID:id ASSIGN expr:e {:
                symbolTable.put(id, e);
                RESULT = e;
        :}
    | ID:id {:
                Double value = symbolTable.get(id);
                if (value == null){
                        System.out.println("Variavel nao inicializada!");
                }
                RESULT = value;
        :}
    ;
